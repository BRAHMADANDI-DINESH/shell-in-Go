ls

Output:

Applications		etc
Library				home
...

reader := bufio.NewReader(os.Stdin)
input, err := reader.ReadString('\n')

func main() {
    reader := bufio.NewReader(os.Stdin)
    for {
        // Read the keyboad input.
        input, err := reader.ReadString('\n')
        if err != nil {
            fmt.Fprintln(os.Stderr, err)
        }
    }
}


func execInput(input string) error {
    // Remove the newline character.
    input = strings.TrimSuffix(input, "\n")

    // Prepare the command to execute.
    cmd := exec.Command(input)

    // Set the correct output device.
    cmd.Stderr = os.Stderr
    cmd.Stdout = os.Stdout

    // Execute the command and return the error.
    return cmd.Run()
}

func main() {
    reader := bufio.NewReader(os.Stdin)
    for {
        fmt.Print("> ")
        // Read the keyboad input.
        input, err := reader.ReadString('\n')
        if err != nil {
            fmt.Fprintln(os.Stderr, err)
        }

        // Handle the execution of the input.
        if err = execInput(input); err != nil {
            fmt.Fprintln(os.Stderr, err)
        }
    }
}


> ls
LICENSE
main.go
main_test.go


Â» Arguments

> ls -l
exec: "ls -l": executable file not found in $PATH


func execInput(input string) error {
    // Remove the newline character.
    input = strings.TrimSuffix(input, "\n")

    // Split the input to separate the command and the arguments.
    args := strings.Split(input, " ")

    // Pass the program and the arguments separately.
    cmd := exec.Command(args[0], args[1:]...)
    ...
}


> ls -l
total 24
-rw-r--r--  1 simon  staff  1076 30 Jun 09:49 LICENSE
-rw-r--r--  1 simon  staff  1058 30 Jun 10:10 main.go
-rw-r--r--  1 simon  staff   897 30 Jun 09:49 main_test.go


> cd /
> ls
LICENSE
main.go
main_test.go


// Split the input to separate the command and the arguments.
args := strings.Split(input, " ")

// Check for built-in commands.
switch args[0] {
case "cd":
    // 'cd' to home dir with empty path not yet supported.
    if len(args) < 2 {
        return  errors.New("path required")
    }
    // Change the directory and return the error.
    return os.Chdir(args[1])
case "exit":
    os.Exit(0)
}
...


> cd /
> ls
Applications
Library
Network
System
...


